name: CI (Improved)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements_improved.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_improved.txt
          pip install flake8 black isort mypy

      - name: Code formatting check (Black)
        run: |
          black --check --diff main_improved.py migrate_db.py health_check.py

      - name: Import sorting check (isort)
        run: |
          isort --check-only --diff main_improved.py migrate_db.py health_check.py

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 main_improved.py migrate_db.py health_check.py --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 main_improved.py migrate_db.py health_check.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Type checking with mypy
        run: |
          mypy main_improved.py migrate_db.py health_check.py --ignore-missing-imports

      - name: Test imports and basic functionality
        run: |
          python -c "
          import importlib.util
          import sys
          
          # Test main_improved.py import
          spec = importlib.util.spec_from_file_location('bot', 'main_improved.py')
          bot_module = importlib.util.module_from_spec(spec)
          spec.loader.exec_module(bot_module)
          print('✅ main_improved.py imported successfully')
          
          # Test health_check.py import
          spec = importlib.util.spec_from_file_location('health', 'health_check.py')
          health_module = importlib.util.module_from_spec(spec)
          spec.loader.exec_module(health_module)
          print('✅ health_check.py imported successfully')
          
          # Test migrate_db.py import
          spec = importlib.util.spec_from_file_location('migrate', 'migrate_db.py')
          migrate_module = importlib.util.module_from_spec(spec)
          spec.loader.exec_module(migrate_module)
          print('✅ migrate_db.py imported successfully')
          "

      - name: Test database operations
        run: |
          python -c "
          from main_improved import init_db, code_exists, insert_codes_batch, get_stats, normalize_code
          import tempfile
          import os
          
          # Test with temporary database
          with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as f:
              db_path = f.name
          
          try:
              # Test database initialization
              conn = init_db(db_path)
              print('✅ Database initialization successful')
              
              # Test code normalization
              normalized = normalize_code('ABCDE-FGHIJ-KLMNO-PQRST-UVWXY')
              assert normalized == 'ABCDEFGHIJKLMNOPQRSTUVWXY'
              print('✅ Code normalization working')
              
              # Test code existence check
              exists = code_exists(conn, 'TEST-CODE-12345')
              assert not exists
              print('✅ Code existence check working')
              
              # Test batch insert
              test_data = [
                  ('TEST-CODE-12345', 'TESTCODE12345', 'golden key', 'test', 'test context', '2024-01-01T00:00:00Z')
              ]
              insert_codes_batch(conn, test_data)
              print('✅ Batch insert working')
              
              # Test stats
              stats = get_stats(conn)
              assert stats['total_codes'] >= 1
              print('✅ Statistics collection working')
              
              conn.close()
              
          finally:
              if os.path.exists(db_path):
                  os.unlink(db_path)
          
          print('✅ All database tests passed')
          "

      - name: Test configuration validation
        run: |
          python -c "
          import os
          from main_improved import validate_config
          
          # Test with minimal valid config
          os.environ['HTML_SOURCES'] = 'https://example.com'
          os.environ['DISCORD_WEBHOOK_URL'] = 'https://discord.com/api/webhooks/test'
          
          try:
              validate_config()
              print('✅ Configuration validation working')
          except Exception as e:
              print(f'❌ Configuration validation failed: {e}')
              raise
          "

      - name: Test health check functionality
        run: |
          python -c "
          from health_check import check_database, check_network, check_configuration
          import tempfile
          import os
          
          # Test database health check with temporary DB
          with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as f:
              db_path = f.name
          
          try:
              # Initialize a test database
              from main_improved import init_db
              conn = init_db(db_path)
              conn.close()
              
              # Test database health check
              result = check_database(db_path)
              assert result['status'] in ['healthy', 'warning']
              print('✅ Database health check working')
              
          finally:
              if os.path.exists(db_path):
                  os.unlink(db_path)
          
          # Test network health check
          result = check_network()
          print(f'Network check result: {result[\"status\"]}')
          
          # Test configuration health check
          os.environ['HTML_SOURCES'] = 'https://example.com'
          result = check_configuration()
          assert result['status'] in ['healthy', 'warning']
          print('✅ Configuration health check working')
          "

      - name: Test migration functionality
        run: |
          python -c "
          from migrate_db import migrate_database
          import tempfile
          import sqlite3
          import os
          
          # Create a legacy database structure
          with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as f:
              db_path = f.name
          
          try:
              # Create old schema
              conn = sqlite3.connect(db_path)
              conn.execute('''
                  CREATE TABLE codes (
                      id INTEGER PRIMARY KEY AUTOINCREMENT,
                      code TEXT UNIQUE NOT NULL,
                      reward_type TEXT,
                      source TEXT,
                      context TEXT,
                      date_found_utc TEXT
                  )
              ''')
              conn.execute('INSERT INTO codes (code, reward_type, source, context, date_found_utc) VALUES (?, ?, ?, ?, ?)',
                          ('TEST-12345', 'golden key', 'test', 'test context', '2024-01-01T00:00:00Z'))
              conn.commit()
              conn.close()
              
              # Test migration
              migrate_database(db_path)
              print('✅ Database migration working')
              
              # Verify new schema
              conn = sqlite3.connect(db_path)
              cursor = conn.cursor()
              cursor.execute('PRAGMA table_info(codes)')
              columns = [col[1] for col in cursor.fetchall()]
              
              required_columns = ['normalized_code', 'expiry_date', 'is_active', 'created_at']
              for col in required_columns:
                  assert col in columns, f'Missing column: {col}'
              
              conn.close()
              print('✅ Migration schema verification passed')
              
          finally:
              if os.path.exists(db_path):
                  os.unlink(db_path)
          "

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit security scan
        run: |
          bandit -r main_improved.py migrate_db.py health_check.py -f json -o bandit-report.json || true
          bandit -r main_improved.py migrate_db.py health_check.py

      - name: Check for known vulnerabilities
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30

  compatibility-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_improved.txt

      - name: Test cross-platform compatibility
        run: |
          python -c "
          print('Testing cross-platform compatibility...')
          
          # Test imports
          from main_improved import *
          from health_check import *
          from migrate_db import *
          
          print('✅ All imports successful on ${{ matrix.os }}')
          
          # Test basic functionality
          import tempfile
          import os
          
          with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as f:
              db_path = f.name
          
          try:
              conn = init_db(db_path)
              conn.close()
              print('✅ Database operations work on ${{ matrix.os }}')
          finally:
              if os.path.exists(db_path):
                  os.unlink(db_path)
          "

  build-summary:
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan, compatibility-test]
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "## 🚀 CI Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Test | ${{ needs.lint-and-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Compatibility Test | ${{ needs.compatibility-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.lint-and-test.result }}" == "success" && "${{ needs.security-scan.result }}" == "success" && "${{ needs.compatibility-test.result }}" == "success" ]]; then
            echo "✅ **All checks passed!** The code is ready for deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some checks failed.** Please review the results above." >> $GITHUB_STEP_SUMMARY
          fi