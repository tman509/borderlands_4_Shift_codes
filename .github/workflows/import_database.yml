name: Import Old Database

on:
  workflow_dispatch:
    inputs:
      backup_current:
        description: "Backup current database before import?"
        required: false
        type: boolean
        default: true
      import_source:
        description: "Source of old database"
        required: true
        type: choice
        options:
          - "Upload as artifact"
          - "From previous workflow run"
        default: "From previous workflow run"

permissions:
  contents: read

jobs:
  import-database:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Download current database (if exists)
        if: ${{ inputs.backup_current == true }}
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: run_simple.yml
          name: shift_codes-database
          path: ./current/
          if_no_artifact_found: ignore

      - name: Download old database from artifacts
        if: ${{ inputs.import_source == 'Upload as artifact' }}
        uses: dawidd6/action-download-artifact@v2
        with:
          name: old-database
          path: ./old/
          if_no_artifact_found: fail

      - name: Download old database from previous run
        if: ${{ inputs.import_source == 'From previous workflow run' }}
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: run.yml  # Original workflow name
          name: shift_codes-database
          path: ./old/
          if_no_artifact_found: ignore

      - name: Backup current database
        if: ${{ inputs.backup_current == true }}
        run: |
          if [ -f ./current/shift_codes.db ]; then
            echo "📦 Backing up current database..."
            cp ./current/shift_codes.db ./shift_codes_backup_$(date +%Y%m%d_%H%M%S).db
            echo "✅ Current database backed up"
          else
            echo "ℹ️ No current database to backup"
          fi

      - name: Import old database
        run: |
          echo "🔄 Starting database import..."
          
          # Determine old database path
          if [ -f ./old/shift_codes.db ]; then
            OLD_DB="./old/shift_codes.db"
          elif [ -f ./shift_codes.db ]; then
            OLD_DB="./shift_codes.db"
          else
            echo "❌ No old database found to import"
            exit 1
          fi
          
          # Determine new database path
          if [ -f ./current/shift_codes.db ]; then
            NEW_DB="./current/shift_codes.db"
            echo "📥 Merging with existing database"
          else
            NEW_DB="./shift_codes.db"
            echo "📥 Creating new database"
          fi
          
          echo "Old database: $OLD_DB"
          echo "New database: $NEW_DB"
          
          # Run import
          python import_old_database.py "$OLD_DB" "$NEW_DB"
          
          # Move result to final location
          if [ "$NEW_DB" != "./shift_codes.db" ]; then
            mv "$NEW_DB" ./shift_codes.db
          fi

      - name: Verify import results
        run: |
          echo "🔍 Verifying import results..."
          
          python -c "
          import sqlite3
          
          conn = sqlite3.connect('./shift_codes.db')
          cursor = conn.cursor()
          
          # Get total count
          cursor.execute('SELECT COUNT(*) FROM codes')
          total = cursor.fetchone()[0]
          
          # Get active count
          cursor.execute('SELECT COUNT(*) FROM codes WHERE is_active = 1')
          active = cursor.fetchone()[0]
          
          # Get recent codes
          cursor.execute('SELECT code, reward_type, date_found_utc FROM codes ORDER BY date_found_utc DESC LIMIT 5')
          recent = cursor.fetchall()
          
          print(f'📊 Database Statistics:')
          print(f'  Total codes: {total}')
          print(f'  Active codes: {active}')
          print(f'  Recent codes:')
          for code, reward, date in recent:
              print(f'    - {code} ({reward or \"Unknown\"}) - {date}')
          
          conn.close()
          "

      - name: Upload merged database
        uses: actions/upload-artifact@v4
        with:
          name: shift_codes-database
          path: |
            shift_codes.db
            shift_codes_backup_*.db
          retention-days: 30

      - name: Send notification
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          if [ -n "$DISCORD_WEBHOOK_URL" ]; then
            echo "📢 Sending import completion notification..."
            
            # Get database stats
            TOTAL=$(python -c "import sqlite3; conn = sqlite3.connect('./shift_codes.db'); cursor = conn.cursor(); cursor.execute('SELECT COUNT(*) FROM codes'); print(cursor.fetchone()[0]); conn.close()")
            
            payload='{"content":"✅ **Database Import Completed**\nOld SHiFT codes have been successfully imported!\n\n📊 **Total codes in database:** '"$TOTAL"'\n\n💡 **Next run will only notify about NEW codes**\n**Time:** '"$(date -u '+%Y-%m-%d %H:%M')"' UTC"}'
            curl -sS -H "Content-Type: application/json" -X POST -d "$payload" "$DISCORD_WEBHOOK_URL"
            echo "✅ Notification sent"
          else
            echo "ℹ️ No Discord webhook configured for notifications"
          fi

      - name: Summary
        run: |
          echo "## 🎉 Database Import Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Import completed successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Database Statistics" >> $GITHUB_STEP_SUMMARY
          
          TOTAL=$(python -c "import sqlite3; conn = sqlite3.connect('./shift_codes.db'); cursor = conn.cursor(); cursor.execute('SELECT COUNT(*) FROM codes'); print(cursor.fetchone()[0]); conn.close()")
          echo "- **Total codes:** $TOTAL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Your old codes are now imported" >> $GITHUB_STEP_SUMMARY
          echo "2. Future bot runs will only notify about NEW codes" >> $GITHUB_STEP_SUMMARY
          echo "3. No more notification spam!" >> $GITHUB_STEP_SUMMARY